// client.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#define SERV_TCP_PORT 3001

int main(){
    int sockfd;
    struct sockaddr_in serv_addr;
    char buffer[1024];
    
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if(sockfd < 0){
        perror("Socket not created\n");
        exit(1);
    }
    printf("Socket Created...\n");

    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(SERV_TCP_PORT);
    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");

    connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
    printf("Connection Established\n");

    while(1){
        printf("Enter a number (or type 'exit' to quit): ");
        fgets(buffer, sizeof(buffer), stdin);
        
        if (strncmp(buffer, "exit", 4) == 0)
            break;

        send(sockfd, buffer, strlen(buffer), 0);
        bzero(buffer, sizeof(buffer));
        recv(sockfd, buffer, sizeof(buffer), 0);
        printf("Server: %s\n", buffer);
    }

    close(sockfd);
    printf("Disconnected\n");
    return 0;
}



// server.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <ctype.h>
#define SERV_TCP_PORT 3001

int is_prime(int num){
    if(num < 2) return 0;
    for(int i = 2; i * i <= num; i++){
        if(num % i == 0) return 0;
    }
    return 1;
}

int main(){
    int sockfd, newsockfd;
    struct sockaddr_in serv_addr, cli_addr;
    socklen_t addr_size;
    char buffer[1024];

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    printf("Socket Created...\n");

    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(SERV_TCP_PORT);
    serv_addr.sin_addr.s_addr = INADDR_ANY;

    bind(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
    printf("Binded...\n");

    listen(sockfd, 5);
    printf("Listening...\n");

    addr_size = sizeof(cli_addr);
    newsockfd = accept(sockfd, (struct sockaddr*)&cli_addr, &addr_size);
    printf("Client Connected\n");

    while(1){
        bzero(buffer, sizeof(buffer));
        recv(newsockfd, buffer, sizeof(buffer), 0);

        if(strncmp(buffer, "exit", 4) == 0)
            break;

        int num = atoi(buffer);
        bzero(buffer, sizeof(buffer));

        if(is_prime(num))
            snprintf(buffer, sizeof(buffer), "%d is a Prime Number", num);
        else
            snprintf(buffer, sizeof(buffer), "%d is NOT a Prime Number", num);

        send(newsockfd, buffer, strlen(buffer), 0);
    }

    close(newsockfd);
    close(sockfd);
    return 0;
}
