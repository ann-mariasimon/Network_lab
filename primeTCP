// client.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>
#define SERV_TCP_PORT 3001

int main() {
    int sockfd, number, result;
    struct sockaddr_in serv_addr;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if(sockfd < 0) {
        perror("Socket creation failed");
        exit(1);
    }
    printf("Socket Created.\n");

    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(SERV_TCP_PORT);
    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");

    connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
    printf("Connected to server.\n");

    printf("Enter a number: ");
    scanf("%d", &number);

    send(sockfd, &number, sizeof(number), 0);

    recv(sockfd, &result, sizeof(result), 0);

    if(result)
        printf("%d is a Prime Number\n", number);
    else
        printf("%d is NOT a Prime Number\n", number);

    close(sockfd);
    return 0;
}


// server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#define SERV_TCP_PORT 3001

int isPrime(int n) {
    if(n < 2) return 0;
    for(int i = 2; i * i <= n; i++) {
        if(n % i == 0)
            return 0;
    }
    return 1;
}

int main() {
    int sockfd, newsockfd, number, result;
    struct sockaddr_in serv_addr, cli_addr;
    socklen_t addr_size;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if(sockfd < 0) {
        perror("Socket creation failed");
        exit(1);
    }
    printf("Socket Created.\n");

    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(SERV_TCP_PORT);
    serv_addr.sin_addr.s_addr = INADDR_ANY;

    if(bind(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Bind failed");
        exit(1);
    }
    printf("Binded.\n");

    listen(sockfd, 5);
    printf("Listening...\n");

    addr_size = sizeof(cli_addr);
    newsockfd = accept(sockfd, (struct sockaddr*)&cli_addr, &addr_size);
    printf("Client connected.\n");

    recv(newsockfd, &number, sizeof(number), 0);
    printf("Received number: %d\n", number);

    result = isPrime(number);

    send(newsockfd, &result, sizeof(result), 0);
    printf("Prime check result sent.\n");

    close(newsockfd);
    close(sockfd);
    return 0;
}
